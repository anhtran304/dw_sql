-- PART 1 - DATA WAREHOUSE SETUP 
-- 
--  TASK 1.1
DROP TABLE A2ERROREVENT CASCADE CONSTRAINTS;
/
DROP SEQUENCE A2ERROREVENT_SEQ;
CREATE SEQUENCE A2ERROREVENT_SEQ;
/
CREATE TABLE A2ERROREVENT
(   ERRORID INTEGER
,   SOURCE_ROWID ROWID
,   SOURCE_TABLE VARCHAR2(30)
,   FILTERID NUMBER
,   DATETIME DATE
,   ACTION VARCHAR2(26)
,   CONSTRAINT ERROREVENTACTION CHECK (ACTION IN ('SKIP', 'MODIFY'))
);
/

-- TASK 1.2
DROP TABLE DWPROD;
DROP SEQUENCE DWPROD_SEQ;
CREATE SEQUENCE DWPROD_SEQ;
CREATE TABLE DWPROD 
(
    DWPRODID INTEGER
,   DWSOURCETABLE VARCHAR2(20)
,   DWSOURCEID INTEGER
,   PRODNAME VARCHAR2(200)
,   PRODCATNAME VARCHAR2(40)
,   PRODMANUNAME VARCHAR2(40)
,   PRODSHIPNAME VARCHAR2(40)
);
/
DROP TABLE DWCUST;
DROP SEQUENCE DWCUST_SEQ;
CREATE SEQUENCE DWCUST_SEQ;
CREATE TABLE DWCUST 
(
    DWCUSTID INTEGER
,   DWSOURCEIDBRIS INTEGER
,   DWSOURCEIDMELB INTEGER
,   FIRSTNAME VARCHAR2(40)
,   SURNAME VARCHAR2(40)
,   GENDER VARCHAR2(10)
,   PHONE VARCHAR2(20)
,   POSTCODE NUMBER
,   CITY VARCHAR2(20)
,   STATE VARCHAR2(10)
,   CUSTCATNAME VARCHAR2(30)
);
/
DROP TABLE DWSALE;
DROP SEQUENCE DWSALE_SEQ;
CREATE SEQUENCE DWSALE_SEQ;
CREATE TABLE DWSALE 
(
    DWSALEID INTEGER
,   DWCUSTID INTEGER
,   DWPRODID INTEGER
,   DWSOURCEIDBRIS INTEGER
,   DWSOURCEIDMELB INTEGER
,   QTY NUMBER
,   SALE_DWDATEID INTEGER
,   SHIP_DWDATEID INTEGER
,   SALEPRICE NUMBER
);
/

-- TASK 1.3
DROP TABLE GENDERSPELLING;
CREATE TABLE GENDERSPELLING
(
    INVALID_VALUE VARCHAR2(20)
,   NEW_VALUE VARCHAR2(1)
);
/

INSERT INTO GENDERSPELLING VALUES ('MAIL', 'M');
INSERT INTO GENDERSPELLING VALUES ('WOMAN', 'F');
INSERT INTO GENDERSPELLING VALUES ('FEM', 'F');
INSERT INTO GENDERSPELLING VALUES ('FEMALE', 'F');
INSERT INTO GENDERSPELLING VALUES ('MALE', 'M');
INSERT INTO GENDERSPELLING VALUES ('GENTLEMAN', 'M');
INSERT INTO GENDERSPELLING VALUES ('MM', 'M');
INSERT INTO GENDERSPELLING VALUES ('FF', 'F');
INSERT INTO GENDERSPELLING VALUES ('FEMAIL', 'F');
/

-- PART 2 - PRODUCT TRANSFER 
-- 
--  TASK 2.1 - FILTER 1
INSERT INTO A2ERROREVENT
SELECT A2ERROREVENT_SEQ.NEXTVAL, ROWID, 'A2PRODUCT', 1, SYSDATE, 'SKIP'
FROM A2PRODUCT P
WHERE P.PRODNAME IS NULL;
/
COMMIT;
/
-- TESTING 
SELECT COUNT(*) AS "A2PRODUCT PRODUCT NAME NULL"
FROM A2PRODUCT P
WHERE P.PRODNAME IS NULL;
/
SELECT COUNT(*) AS "A2ERROREVENT PRODUCT NAME NULL"
FROM A2ERROREVENT P
WHERE P.FILTERID = 1 AND ACTION = 'SKIP';
/

--  TASK 2.2 - FILTER 2
INSERT INTO A2ERROREVENT
SELECT A2ERROREVENT_SEQ.NEXTVAL, ROWID, 'A2PRODUCT', 2, SYSDATE, 'MODIFY'
FROM A2PRODUCT P
WHERE P.MANUFACTURERCODE IS NULL;
/
COMMIT;
/
-- TESTING 
SELECT COUNT(*) AS "A2PRODUCT MCODE NULL"
FROM A2PRODUCT P
WHERE P.PRODNAME IS NULL;
/
SELECT COUNT(*) AS "A2ERROREVENT MCODE NUL"
FROM A2ERROREVENT P
WHERE P.FILTERID = 2 AND ACTION = 'MODIFY';
/

--  TASK 2.3 - FILTER 3
INSERT INTO A2ERROREVENT
SELECT A2ERROREVENT_SEQ.NEXTVAL, ROWID, 'A2PRODUCT', 3, SYSDATE, 'MODIFY'
FROM A2PRODUCT P
WHERE P.PRODCATEGORY IS NULL
OR P.PRODCATEGORY NOT IN 
(SELECT PRODUCTCATEGORY
FROM A2PRODCATEGORY);
/
COMMIT;
/
-- TESTING 
SELECT COUNT(*) AS "A2PRODUCT PRODCAT WRONG"
FROM A2PRODUCT P
WHERE P.PRODCATEGORY IS NULL
OR P.PRODCATEGORY NOT IN
(SELECT PRODUCTCATEGORY
FROM A2PRODCATEGORY);
/
SELECT COUNT(*) AS "A2ERROREVENT PRODCAT WRONG"
FROM A2ERROREVENT P
WHERE P.FILTERID = 3 AND ACTION = 'MODIFY';
/

-- -- TASK 2.4.1 -- COMMENT OUT WHEN RUNNING CHECK MARK 
-- SELECT P.ROWID FROM A2PRODUCT P
-- WHERE P.ROWID NOT IN 
-- (SELECT E.SOURCE_ROWID FROM A2ERROREVENT E);
-- /
-- -- TESTING
-- SELECT COUNT(P.ROWID) AS "PRODUCT ROWID" FROM A2PRODUCT P;
-- / 
-- SELECT COUNT(E.SOURCE_ROWID) AS "A2ERROREVENT ROWID" FROM A2ERROREVENT E;
-- /

-- -- TASK 2.4.2 -- COMMENT OUT WHEN RUNNING CHECK MARK 
-- SELECT PC.CATEGORYNAME, MF.MANUNAME, S.DESCRIPTION
-- FROM ((A2PRODUCT P INNER JOIN A2PRODCATEGORY PC ON P.PRODCATEGORY = PC.PRODUCTCATEGORY)
--     INNER JOIN A2MANUFACTURER MF ON P.MANUFACTURERCODE = MF.MANUCODE)
--     INNER JOIN A2SHIPPING S ON P.SHIPPINGCODE = S.SHIPPINGCODE
-- WHERE P.ROWID NOT IN 
-- (SELECT E.SOURCE_ROWID
-- FROM A2ERROREVENT E);
-- /
-- -- TESTING
-- SELECT COUNT(P.ROWID) AS "PRODUCT ROWID"
-- FROM A2PRODUCT P;
-- /
-- SELECT COUNT(E.SOURCE_ROWID) AS "A2ERROREVENT ROWID"
-- FROM A2ERROREVENT E;
-- /

-- TASK 2.4.3 
INSERT INTO DWPROD
SELECT DWPROD_SEQ.NEXTVAL, 'A2PRODUCT', P.PRODID, P.PRODNAME, PC.CATEGORYNAME, MF.MANUNAME, S.DESCRIPTION
FROM A2PRODUCT P NATURAL JOIN A2PRODCATEGORY PC, A2MANUFACTURER MF, A2SHIPPING S
WHERE P.ROWID NOT IN 
(SELECT E.SOURCE_ROWID
FROM A2ERROREVENT E) AND P.PRODCATEGORY = PC.PRODUCTCATEGORY
AND P.MANUFACTURERCODE = MF.MANUCODE
AND P.SHIPPINGCODE = S.SHIPPINGCODE;
/
COMMIT;
/
-- TESTING
SELECT COUNT(*) AS "TOTAL PRODUCT COUNT"
FROM A2PRODUCT P;
/
SELECT COUNT(E.SOURCE_ROWID) AS "A2ERROREVENT PRODUCT"
FROM A2ERROREVENT E
WHERE E.SOURCE_TABLE = 'A2PRODUCT';
/
SELECT COUNT(DWP.DWPRODID) AS "TOTAL DWPROD COUNT"
FROM DWPROD DWP
WHERE DWP.DWSOURCETABLE = 'A2PRODUCT';
/

-- TASK 2.4.4 
INSERT INTO DWPROD
SELECT DWPROD_SEQ.NEXTVAL, 'A2PRODUCT', P.PRODID, P.PRODNAME, PC.CATEGORYNAME, 'UNKNOWN', S.DESCRIPTION
FROM A2PRODUCT P NATURAL JOIN A2PRODCATEGORY PC, A2SHIPPING S
WHERE P.ROWID IN 
(SELECT E.SOURCE_ROWID
FROM A2ERROREVENT E WHERE E.FILTERID = 2) 
AND P.PRODCATEGORY = PC.PRODUCTCATEGORY 
AND P.SHIPPINGCODE = S.SHIPPINGCODE;
/
COMMIT;
/
-- TESTING
SELECT COUNT(*) AS "TOTAL PRODUCT COUNT"
FROM A2PRODUCT P;
/
SELECT COUNT(E.SOURCE_ROWID) AS "A2ERROREVENT PRODUCT"
FROM A2ERROREVENT E
WHERE E.SOURCE_TABLE = 'A2PRODUCT' AND E.FILTERID <> 2;
/
SELECT COUNT(DWP.DWPRODID) AS "TOTAL DWPROD COUNT"
FROM DWPROD DWP
WHERE DWP.DWSOURCETABLE = 'A2PRODUCT';
/

-- TASK 2.4.5 
INSERT INTO DWPROD
SELECT DWPROD_SEQ.NEXTVAL, 'A2PRODUCT', P.PRODID, P.PRODNAME, 'UNKNOWN', MF.MANUNAME, S.DESCRIPTION
FROM A2PRODUCT P NATURAL JOIN A2MANUFACTURER MF, A2SHIPPING S
WHERE P.ROWID IN 
(SELECT E.SOURCE_ROWID
FROM A2ERROREVENT E WHERE E.FILTERID = 3)
AND P.MANUFACTURERCODE = MF.MANUCODE
AND P.SHIPPINGCODE = S.SHIPPINGCODE;
/
COMMIT;
/
-- TESTING
SELECT COUNT(*) AS "TOTAL PRODUCT COUNT"
FROM A2PRODUCT P;
/
SELECT COUNT(E.SOURCE_ROWID) AS "A2ERROREVENT PRODUCT"
FROM A2ERROREVENT E
WHERE E.SOURCE_TABLE = 'A2PRODUCT' AND E.FILTERID <> 3 AND E.FILTERID <> 2;
/
SELECT COUNT(DWP.DWPRODID) AS "TOTAL DWPROD COUNT"
FROM DWPROD DWP
WHERE DWP.DWSOURCETABLE = 'A2PRODUCT';
/

-- PART 3 - CUSTOMER BRISBANE TRANSFER 
-- 
--  TASK 3.1 - FILTER 4
INSERT INTO A2ERROREVENT
SELECT A2ERROREVENT_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS', 4, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS CB
WHERE CB.CUSTCATCODE NOT IN 
(SELECT CUSTCATCODE
    FROM A2CUSTCATEGORY) OR CB.CUSTCATCODE IS NULL; 
/
COMMIT;
/
-- TESTING
SELECT COUNT(*)
FROM A2ERROREVENT E
WHERE FILTERID = 4
    AND E.SOURCE_ROWID IN (
SELECT ROWID
    FROM A2CUSTBRIS CB
    WHERE CB.CUSTCATCODE NOT IN
(SELECT CUSTCATCODE
    FROM A2CUSTCATEGORY));
/

--  TASK 3.2 - FILTER 5
INSERT INTO A2ERROREVENT
SELECT A2ERROREVENT_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS', 5, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS CB
WHERE INSTR(CB.PHONE, ' ') > 0 
    OR INSTR(CB.PHONE, '-') > 0;  
/
COMMIT;
/
-- TESTING
SELECT COUNT(*)
FROM A2ERROREVENT E
WHERE FILTERID = 5
    AND E.SOURCE_ROWID IN 
    (SELECT ROWID
    FROM A2CUSTBRIS CB
    WHERE INSTR (CB.PHONE, ' ') > 0 
        OR INSTR (CB.PHONE, '-') > 0);
/

--  TASK 3.3 - FILTER 6
INSERT INTO A2ERROREVENT
SELECT A2ERROREVENT_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS', 6, SYSDATE, 'SKIP'
FROM A2CUSTBRIS CB
WHERE LENGTH(CB.PHONE) != 10 
    AND (NOT (CB.PHONE LIKE '%-%' OR CB.PHONE LIKE '% %'));  
/
COMMIT;
/
-- TESTING
SELECT COUNT(*)
FROM A2ERROREVENT E
WHERE FILTERID = 6
    AND E.SOURCE_ROWID IN 
    (SELECT ROWID
    FROM A2CUSTBRIS CB
    WHERE LENGTH
    (CB.PHONE) != 10 
    AND (NOT (CB.PHONE LIKE '%-%' OR CB.PHONE LIKE '% %'))); 
/
--  TASK 3.4 - FILTER 7
INSERT INTO A2ERROREVENT
SELECT A2ERROREVENT_SEQ.NEXTVAL, ROWID, 'A2CUSTBRIS', 7, SYSDATE, 'MODIFY'
FROM A2CUSTBRIS CB
WHERE UPPER(CB.GENDER) NOT LIKE 'M' 
    AND UPPER(CB.GENDER) NOT LIKE 'F'
    OR CB.GENDER IS NULL;  
/
COMMIT;
/
-- TESTING
SELECT COUNT(*)
FROM A2ERROREVENT E
WHERE FILTERID = 7
    AND E.SOURCE_ROWID IN 
    (SELECT ROWID
    FROM A2CUSTBRIS CB
    WHERE UPPER
    (CB.GENDER) != 'M' 
        AND
    (UPPER
    (CB.GENDER) !='F')
        OR CB.GENDER IS NULL);   
/

--  TASK 3.5.1 
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_SEQ.NEXTVAL, CB.CUSTID, CB.FNAME, CB.SNAME, UPPER(CB.GENDER), CB.PHONE, CB.POSTCODE, CB.CITY, CB.STATE, CC.CUSTCATNAME
FROM A2CUSTBRIS CB NATURAL JOIN A2CUSTCATEGORY CC
WHERE CB.ROWID NOT IN (
    SELECT E.SOURCE_ROWID
    FROM A2ERROREVENT E
    );
/
COMMIT;
/
-- TESTING
SELECT COUNT(*) AS "TOTAL A2CUSTBRIS"
FROM A2CUSTBRIS CB;
/
SELECT COUNT(*) AS "TOTAL DWCUST CBRIS"
FROM DWCUST DWC WHERE DWC.DWSOURCEIDBRIS IS NOT NULL;
/
SELECT COUNT(*) AS "TOTAL A2ERROREVENT CBRIS"
FROM A2ERROREVENT E WHERE E.SOURCE_TABLE = 'A2CUSTBRIS';
/
SELECT * FROM A2ERROREVENT;
/

--  TASK 3.5.2 
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_SEQ.NEXTVAL, CB.CUSTID, CB.FNAME, CB.SNAME, UPPER(CB.GENDER), CB.PHONE, CB.POSTCODE, CB.CITY, CB.STATE, 'UNKNOWN' 
FROM A2CUSTBRIS CB
WHERE CB.ROWID IN 
(SELECT E.SOURCE_ROWID 
FROM A2ERROREVENT E 
WHERE E.FILTERID = 4);
/
COMMIT;
/
-- TESTING 
SELECT COUNT(*) AS "TOTAL DWCUST CBRIS" 
FROM DWCUST DWC 
WHERE DWC.CUSTCATNAME = 'UNKNOWN';
/
SELECT COUNT(*) AS "TOTAL A2CUSTBRIS WRONG"
FROM A2CUSTBRIS CB 
WHERE CB.CUSTCATCODE NOT IN
(SELECT CUSTCATCODE
FROM A2CUSTCATEGORY);
/
--  TASK 3.5.3
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_SEQ.NEXTVAL, CB.CUSTID, CB.FNAME, CB.SNAME, UPPER(CB.GENDER), REPLACE(REPLACE(CB.PHONE,' ',''),'-',''), CB.POSTCODE, CB.CITY, CB.STATE, CC.CUSTCATNAME
FROM A2CUSTBRIS CB NATURAL JOIN A2CUSTCATEGORY CC
WHERE CB.ROWID IN 
(SELECT E.SOURCE_ROWID
FROM A2ERROREVENT E
WHERE E.FILTERID = 5);
/
COMMIT;
/
-- TESTING
SELECT COUNT(*) AS "TOTAL A2CUSTBRIS WRONG"
FROM A2CUSTBRIS CB
WHERE INSTR(CB.PHONE, ' ') > 0 
    OR INSTR(CB.PHONE, '-') > 0;  
/
-- TASK 3.5.4
INSERT INTO DWCUST(DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
SELECT DWCUST_SEQ.NEXTVAL, CB.CUSTID, CB.FNAME, CB.SNAME, 
    CASE 
        WHEN UPPER(CB.GENDER) IN (SELECT GS.INVALID_VALUE FROM GENDERSPELLING GS)
            THEN (SELECT GS.NEW_VALUE FROM GENDERSPELLING GS WHERE UPPER(CB.GENDER) = GS.INVALID_VALUE)
        ELSE 'U'
    END,
CB.PHONE, CB.POSTCODE, CB.CITY, CB.STATE, CC.CUSTCATNAME
FROM A2CUSTBRIS CB
NATURAL JOIN A2CUSTCATEGORY CC
WHERE CB.ROWID IN
(SELECT E.SOURCE_ROWID
FROM A2ERROREVENT E
WHERE E.FILTERID = 7);
/
COMMIT;
/
-- TESTING
SELECT COUNT(*) AS "TOTAL A2CUSTBRIS WRONG"
FROM A2CUSTBRIS CB
WHERE UPPER
(CB.GENDER) NOT LIKE 'M' 
    AND UPPER
(CB.GENDER) NOT LIKE 'F'
    OR CB.GENDER IS NULL;  
/
-- TASK 3.5.5 - RUNNING Ass2_DW_Creation_Script.SQL WITHOUT ERROR

-- PART 4 - CUSTOMER MELBOURNE TRANSFER 
-- 
--  TASK 4.1 - FILTER 4